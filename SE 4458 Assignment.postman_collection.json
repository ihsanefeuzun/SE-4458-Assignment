{
	"info": {
		"_postman_id": "43f89074-815c-4f3b-b857-1cf95a505e87",
		"name": "SE 4458 Assignment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29244463"
	},
	"item": [
		{
			"name": "Example",
			"item": [
				{
					"name": "OpenAI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1500ms\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Body Response Size is less than 600 B.\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(600);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the presence of id, object, created, and model fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('object');\r",
									"    pm.expect(responseData).to.have.property('created');\r",
									"    pm.expect(responseData).to.have.property('model');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Usage object contains prompt_tokens, completion_tokens, and total_tokens\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.usage).to.be.an('object');\r",
									"    pm.expect(responseData.usage.prompt_tokens).to.exist;\r",
									"    pm.expect(responseData.usage.completion_tokens).to.exist;\r",
									"    pm.expect(responseData.usage.total_tokens).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure message object within choices array contains role and content fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.choices).to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
									"    \r",
									"    responseData.choices.forEach(function(choice) {\r",
									"        pm.expect(choice.message).to.exist.and.to.be.an('object');\r",
									"        pm.expect(choice.message.role).to.exist.and.to.be.a('string');\r",
									"        pm.expect(choice.message.content).to.exist.and.to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Choices array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.choices).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.choices).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Finish reason within choices array is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.choices).to.be.an('array');\r",
									"    responseData.choices.forEach(function(choice) {\r",
									"        pm.expect(choice.finish_reason).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Finish reason should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Created field is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.created).to.be.a('number');\r",
									"    pm.expect(responseData.created).to.be.at.least(0, \"Value should be a non-negative integer\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{open_AI_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"model\": \"gpt-3.5-turbo\",\r\n    \"messages\": [\r\n        {\r\n            \"role\": \"user\",\r\n            \"content\": \"Who won the world series in 2020?\"\r\n        },\r\n        {\r\n            \"role\": \"assistant\",\r\n            \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\"\r\n        },\r\n        {\r\n            \"role\": \"user\",\r\n            \"content\": \"Where was it played?\"\r\n        }\r\n    ],\r\n    \"temperature\": 1,\r\n    \"top_p\": 1,\r\n    \"n\": 1,\r\n    \"stream\": false,\r\n    \"max_tokens\": 250,\r\n    \"presence_penalty\": 0,\r\n    \"frequency_penalty\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.openai.com/v1/chat/completions",
							"protocol": "https",
							"host": [
								"api",
								"openai",
								"com"
							],
							"path": [
								"v1",
								"chat",
								"completions"
							]
						},
						"description": "\n### Chat Completions\n\nThis endpoint allows you to make an HTTP POST request to complete a chat using the OpenAI model.\n\n**Request Body**\n- `model` (string): The model to use for chat completion.\n- `messages` (array): An array of messages containing the role and content of each message.\n  - `role` (string): The role of the message.\n  - `content` (string): The content of the message.\n- `temperature` (number): The temperature for sampling.\n- `top_p` (number): The nucleus sampling parameter.\n- `n` (number): The number of completions to generate.\n- `stream` (boolean): Indicates whether to stream the response or not.\n- `max_tokens` (number): The maximum number of tokens to generate.\n- `presence_penalty` (number): The presence penalty.\n- `frequency_penalty` (number): The frequency penalty.\n\n**Response**\n- `id` (string): The ID of the completion.\n- `object` (string): The type of object.\n- `created` (number): The timestamp of when the completion was created.\n- `model` (string): The model used for the completion.\n- `choices` (array): An array of choices containing the index, message, logprobs, and finish_reason.\n  - `index` (number): The index of the choice.\n  - `message` (object): The role and content of the message.\n    - `role` (string): The role of the message.\n    - `content` (string): The content of the message.\n  - `logprobs` (null): Log probabilities.\n  - `finish_reason` (string): The reason for completion finishing.\n- `usage` (object): Object containing prompt_tokens, completion_tokens, and total_tokens.\n  - `prompt_tokens` (number): The number of tokens in the prompt.\n  - `completion_tokens` (number): The number of tokens in the completion.\n  - `total_tokens` (number): The total number of tokens.\n- `system_fingerprint` (null): System fingerprint.\n\n**Status Codes**\n- 200: Successful completion.\n\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "HouseAPI",
			"item": [
				{
					"name": "CreateHouse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json;\r",
									"\r",
									"pm.test(\"House created successfully. Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body Response Size is less than 100 B.\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8; ver=1');\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function() {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.innerExceptionMessage).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"InnerExceptionMessage should not be null\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.innerExceptionMessage).to.be.not.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.id).to.be.a('number');\r",
									"    pm.expect(responseData.id).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"//We need to assign the id for automation.\r",
									"\r",
									"bodyValue = JSON.parse(responseBody);\r",
									"bodyData = bodyValue.id;\r",
									"console.log(bodyData);\r",
									"pm.collectionVariables.set(\"house_id\", bodyData);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"house_name\",setHouseName());\r",
									"\r",
									"function setHouseName(){\r",
									"    const houseName = pm.collectionVariables.replaceIn('{{$randomWord}}') ;\r",
									"    if(houseName.length >=1 && houseName.length <=20 ){\r",
									"        const house_name = houseName;\r",
									"        return house_name;\r",
									"    }else{\r",
									"        return \"House Name must be in 1-20 characters.\";\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"owner_name\",setOwnerName());\r",
									"\r",
									"function setOwnerName(){\r",
									"    const ownerName = pm.collectionVariables.replaceIn('{{$randomFirstName}}') ;\r",
									"    if(ownerName.length >=1 && ownerName.length <=20 ){\r",
									"        const owner_name = ownerName;\r",
									"        return owner_name;\r",
									"    }else{\r",
									"        return \"Owner Name must be in 1-20 characters.\";\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"address\",setAddress());\r",
									"\r",
									"function setAddress(){\r",
									"    const randomAddress = pm.collectionVariables.replaceIn('{{$randomCity}}') ;\r",
									"    if(randomAddress.length >=1 && randomAddress.length <=20 ){\r",
									"        const address = randomAddress;\r",
									"        return address;\r",
									"    }else{\r",
									"        return \"Address must be in 1-20 characters.\";\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"number_of_people\",setNumberOfPeople());\r",
									"\r",
									"function setNumberOfPeople(){\r",
									"    const randomInt = pm.collectionVariables.replaceIn('{{$randomInt}}') ;\r",
									"    return randomInt;\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"amenities\",setAmenities());\r",
									"\r",
									"function setAmenities(){\r",
									"    const houseName = pm.collectionVariables.replaceIn('{{$randomWord}}') ;\r",
									"    if(houseName.length >=1 && houseName.length <=20 ){\r",
									"        const house_name = houseName;\r",
									"        return house_name;\r",
									"    }else{\r",
									"        return \"Amenities must be in 1-20 characters.\";\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"name\": \"{{house_name}}\",\r\n  \"ownerName\": \"{{owner_name}}\",\r\n  \"address\": \"{{address}}\",\r\n  \"numberofPeople\": {{number_of_people}},\r\n  \"amenities\": \"{{amenities}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/CreateHouse",
							"host": [
								"{{url}}"
							],
							"path": [
								"CreateHouse"
							]
						}
					},
					"response": []
				},
				{
					"name": "CheckHouse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json;\r",
									"\r",
									"pm.test(\"Successful, Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8; ver=1');\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"ownerName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"address\");\r",
									"    pm.expect(pm.response.text()).to.include(\"numberofPeople\");\r",
									"    pm.expect(pm.response.text()).to.include(\"amenities\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('ownerName');\r",
									"    pm.expect(responseData).to.have.property('address');\r",
									"    pm.expect(responseData).to.have.property('numberofPeople');\r",
									"    pm.expect(responseData).to.have.property('amenities');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id must be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Address is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.address).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Address should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Number of people is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.numberofPeople).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Amenities should be an array or a string with comma-separated values\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.amenities).to.satisfy((value) => {\r",
									"        return Array.isArray(value) || typeof value === 'string';\r",
									"    }, \"Amenities should be an array or a string with comma-separated values\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateHouse",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"house_name\",setHouseName());\r",
									"\r",
									"function setHouseName(){\r",
									"    const houseName = pm.collectionVariables.replaceIn('{{$randomWord}}') ;\r",
									"    if(houseName.length >=1 && houseName.length <=20 ){\r",
									"        const house_name = houseName;\r",
									"        return house_name;\r",
									"    }else{\r",
									"        return \"House Name must be in 1-20 characters.\";\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"owner_name\",setOwnerName());\r",
									"\r",
									"function setOwnerName(){\r",
									"    const ownerName = pm.collectionVariables.replaceIn('{{$randomFirstName}}') ;\r",
									"    if(ownerName.length >=1 && ownerName.length <=20 ){\r",
									"        const owner_name = ownerName;\r",
									"        return owner_name;\r",
									"    }else{\r",
									"        return \"Owner Name must be in 1-20 characters.\";\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"address\",setAddress());\r",
									"\r",
									"function setAddress(){\r",
									"    const randomAddress = pm.collectionVariables.replaceIn('{{$randomCity}}') ;\r",
									"    if(randomAddress.length >=1 && randomAddress.length <=20 ){\r",
									"        const address = randomAddress;\r",
									"        return address;\r",
									"    }else{\r",
									"        return \"Address must be in 1-20 characters.\";\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"number_of_people\",setNumberOfPeople());\r",
									"\r",
									"function setNumberOfPeople(){\r",
									"    const randomInt = pm.collectionVariables.replaceIn('{{$randomInt}}') ;\r",
									"    return randomInt;\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"amenities\",setAmenities());\r",
									"\r",
									"function setAmenities(){\r",
									"    const houseName = pm.collectionVariables.replaceIn('{{$randomWord}}') ;\r",
									"    if(houseName.length >=1 && houseName.length <=20 ){\r",
									"        const house_name = houseName;\r",
									"        return house_name;\r",
									"    }else{\r",
									"        return \"Amenities must be in 1-20 characters.\";\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json;\r",
									"\r",
									"pm.test(\"Successful, Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8; ver=1');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{house_id}},\r\n  \"name\": \"{{house_name}}\",\r\n  \"ownerName\": \"{{owner_name}}\",\r\n  \"address\": \"{{address}}\",\r\n  \"numberofPeople\": {{number_of_people}},\r\n  \"amenities\": \"{{amenities}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteHouse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json;\r",
									"\r",
									"pm.test(\"Successful, Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8; ver=1');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{house_id}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CheckAllHouses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json;\r",
									"\r",
									"pm.test(\"Successful, Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8; ver=1');\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"ownerName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"address\");\r",
									"    pm.expect(pm.response.text()).to.include(\"numberofPeople\");\r",
									"    pm.expect(pm.response.text()).to.include(\"amenities\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('ownerName');\r",
									"    pm.expect(responseData).to.have.property('address');\r",
									"    pm.expect(responseData).to.have.property('numberofPeople');\r",
									"    pm.expect(responseData).to.have.property('amenities');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains an array of houses\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Address field must be a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  responseData.forEach(function(house) {\r",
									"    pm.expect(house.address).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Address should not be empty\");\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Number of people is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(house) {\r",
									"        pm.expect(house.numberofPeople).to.be.a('number').and.to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Amenities are in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(house) {\r",
									"        pm.expect(house.amenities).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "open_AI_token",
			"value": "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",
			"type": "string"
		},
		{
			"key": "url",
			"value": "http://localhost:5000/v1/House",
			"type": "string"
		},
		{
			"key": "house_name",
			"value": ""
		},
		{
			"key": "owner_name",
			"value": ""
		},
		{
			"key": "address",
			"value": ""
		},
		{
			"key": "number_of_people",
			"value": ""
		},
		{
			"key": "house_id",
			"value": ""
		},
		{
			"key": "amenities",
			"value": ""
		}
	]
}